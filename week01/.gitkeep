- 외래키

    FK(외래 키)는 외래 키 테이블에 저장될 수 있는 데이터를 제어하기 위해 두 테이블의 데이터 간에 링크를 설정하고 적용하는 데 사용되는 열 또는 열의 조합입니다. 외래 키 참조에서는 한 테이블에 대한 기본 키 값을 포함하는 열이 다른 테이블의 열에서 참조될 때 두 테이블 사이에 링크가 만들어집니다. 이 열은 두 번째 테이블에서 외래 키가 됩니다.

- 기본키

    테이블에는 일반적으로 테이블의 각 행을 고유하게 식별하는 값을 가진 열 또는 열 조합이 포함되어 있습니다. 이러한 열이나 열 조합은 테이블의 PK(기본 키)라고 하며 테이블에 엔터티 무결성을 적용합니다. 기본 키 제약 조건은 데이터의 고유성을 보장하므로 자주 ID 열에 정의됩니다.

- ER 다이어그램

    ERD는 Entity Relationship Diagram(엔티티 관계 다이어그램)의 약자입니다. 데이터베이스 설계 과정에서 사용되는 모델링 기법 중 하나로, 데이터베이스에 저장될 데이터 엔티티(entity)들과 엔티티 간의 관계(relationship)를 시각적으로 표현합니다.

- 복합 키
    - 두개 이상의 컬럼을 묶어서 하나의 기본키로 지정하는것.
    - 기본키는 하나의 테이블에 하나만 존재할 수 있다, 또한 기본키는 하나 이상의 컬럼으로 구성되어 있다.
        - 기본키가 만약 복합키라면, 복합키 또한 당연히 유일성과 최소성을 만족해야한다

- 연관관계
연관관계는 데이터베이스 설계에서 두 개 이상의 테이블이 서로 관계를 맺는 방식을 의미합니다. 주로 **외래 키(Foreign Key)**를 사용하여 테이블 간의 데이터를 연결하게 되며, 이는 관계형 데이터베이스에서 매우 중요한 개념입니다.

연관관계는 크게 다음 세 가지 유형으로 나눌 수 있습니다:

일대일(1:1) 관계: 하나의 테이블의 행이 다른 테이블의 정확히 하나의 행과 연결되는 경우입니다. 예를 들어, 사용자 테이블과 그 사용자의 프로필 테이블이 일대일 관계를 가질 수 있습니다.

일대다(1:N)관계: 하나의 테이블의 행이 다른 테이블의 여러 행과 연결되는 경우입니다. 예를 들어, 하나의 고객이 여러 주문을 할 수 있다면, 고객 테이블과 주문 테이블은 일대다 관계를 가집니다.

다대다(N:M) 관계: 두 테이블이 여러 행으로 서로 연결되는 경우입니다. 예를 들어, 학생과 수업 테이블이 다대다 관계일 수 있습니다. 학생은 여러 수업을 들을 수 있고, 각 수업에는 여러 학생이 참여할 수 있습니다. 이를 구현하기 위해 **중간 테이블(Join Table)**을 사용하여 다대다 관계를 일대다 관계로 분해합니다.

연관관계는 데이터베이스의 무결성을 유지하고, 데이터 중복을 최소화하며, 쿼리에서 효율적으로 데이터를 가져오도록 돕는 중요한 개념입니다.
- 정규화

정규화는 데이터 중복을 최소화하고 데이터 일관성을 유지하기 위해 데이터베이스 테이블을 구조화하는 과정입니다. 이를 통해 데이터베이스의 무결성을 유지하고 데이터 삽입, 업데이트, 삭제 시 발생할 수 있는 문제(이상 현상)를 방지할 수 있습니다. 정규화는 여러 단계로 이루어지며, 주로 다음과 같은 정규형(Normal Form)을 거칩니다:

- 1NF (First Normal Form, 1차 정규형): 모든 열이 원자값(더 이상 나눌 수 없는 값)을 가져야 합니다.
- 2NF (Second Normal Form, 2차 정규형): 1NF를 만족하고, 기본키에 의존하지 않는 부분적 종속성을 제거해야 합니다.
- 3NF (Third Normal Form, 3차 정규형): 2NF를 만족하고, 기본키에 종속되지 않은 이행적 종속성을 제거해야 합니다.

정규화의 장점:

- 데이터 중복 감소
- 데이터 무결성 보장
- 데이터베이스 크기 감소
- 삽입, 삭제, 갱신 이상 문제 해결

하지만, 지나치게 정규화할 경우 테이블 간의 조인(Join)이 많이 발생하여 성능이 저하될 수 있습니다.

- 반정규화

반정규화는 성능을 최적화하기 위해 의도적으로 정규화된 테이블을 다시 데이터 중복이 허용되는 구조로 변경하는 과정입니다. 정규화된 테이블 구조에서는 데이터를 조회할 때 여러 테이블을 조인해야 하는데, 이로 인해 성능이 저하될 수 있습니다. 반정규화는 이러한 성능 문제를 해결하기 위해 사용됩니다.

- 예를 들어, 자주 조회되는 데이터를 한 테이블에 중복 저장함으로써 조회 성능을 높이는 것이 반정규화의 한 예입니다.

반정규화의 장점:

- 조회 성능 향상
- 복잡한 조인 연산 감소

반정규화의 단점:

- 데이터 중복 증가
- 데이터 일관성 관리가 복잡해짐
- 삽입, 삭제, 갱신 이상 문제 발생 가능

따라서, 데이터베이스 설계에서 정규화와 반정규화를 적절히 조합하여 성능과 데이터 일관성 간의 균형을 맞추는 것이 중요합니다.